// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../data/model/menu_grupo.dart';
import '../data/model/menu_usuario.dart';
import '../data/model/usuarios_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 999324529684626186),
      name: 'MenuUsuarioModel',
      lastPropertyId: const IdUid(3, 1892429968554460863),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1920459268363600745),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 481034728765053030),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1892429968554460863),
            name: 'grupoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 5967203531705451646),
            relationTarget: 'GrupoMenuModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 451502075912232767),
      name: 'UsuariosModel',
      lastPropertyId: const IdUid(2, 7327369501819024646),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4321371377241015924),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7327369501819024646),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 6637949923173502729),
            name: 'lsMenuGrupo',
            targetId: const IdUid(4, 1655939779550617276))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1655939779550617276),
      name: 'GrupoMenuModel',
      lastPropertyId: const IdUid(3, 5183471277791227690),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3844980975195019388),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2137794517312227794),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5183471277791227690),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 7338476682902439120),
            relationTarget: 'UsuariosModel')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 4132775251662415784),
            name: 'lsMenus',
            targetId: const IdUid(2, 999324529684626186))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 1655939779550617276),
      lastIndexId: const IdUid(3, 7338476682902439120),
      lastRelationId: const IdUid(3, 4132775251662415784),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2544483934283152083],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7416888778985959327,
        1673868553503045366,
        3228952563075130892
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MenuUsuarioModel: EntityDefinition<MenuUsuarioModel>(
        model: _entities[0],
        toOneRelations: (MenuUsuarioModel object) => [object.grupo],
        toManyRelations: (MenuUsuarioModel object) => {},
        getId: (MenuUsuarioModel object) => object.id,
        setId: (MenuUsuarioModel object, int id) {
          object.id = id;
        },
        objectToFB: (MenuUsuarioModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.grupo.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MenuUsuarioModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.grupo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.grupo.attach(store);
          return object;
        }),
    UsuariosModel: EntityDefinition<UsuariosModel>(
        model: _entities[1],
        toOneRelations: (UsuariosModel object) => [],
        toManyRelations: (UsuariosModel object) =>
            {RelInfo<UsuariosModel>.toMany(2, object.id): object.lsMenuGrupo},
        getId: (UsuariosModel object) => object.id,
        setId: (UsuariosModel object, int id) {
          object.id = id;
        },
        objectToFB: (UsuariosModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UsuariosModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(
              object.lsMenuGrupo,
              store,
              RelInfo<UsuariosModel>.toMany(2, object.id),
              store.box<UsuariosModel>());
          return object;
        }),
    GrupoMenuModel: EntityDefinition<GrupoMenuModel>(
        model: _entities[2],
        toOneRelations: (GrupoMenuModel object) => [object.usuario],
        toManyRelations: (GrupoMenuModel object) =>
            {RelInfo<GrupoMenuModel>.toMany(3, object.id): object.lsMenus},
        getId: (GrupoMenuModel object) => object.id,
        setId: (GrupoMenuModel object, int id) {
          object.id = id;
        },
        objectToFB: (GrupoMenuModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.usuario.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GrupoMenuModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.usuario.attach(store);
          InternalToManyAccess.setRelInfo(
              object.lsMenus,
              store,
              RelInfo<GrupoMenuModel>.toMany(3, object.id),
              store.box<GrupoMenuModel>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MenuUsuarioModel] entity fields to define ObjectBox queries.
class MenuUsuarioModel_ {
  /// see [MenuUsuarioModel.id]
  static final id =
      QueryIntegerProperty<MenuUsuarioModel>(_entities[0].properties[0]);

  /// see [MenuUsuarioModel.name]
  static final name =
      QueryStringProperty<MenuUsuarioModel>(_entities[0].properties[1]);

  /// see [MenuUsuarioModel.grupo]
  static final grupo = QueryRelationToOne<MenuUsuarioModel, GrupoMenuModel>(
      _entities[0].properties[2]);
}

/// [UsuariosModel] entity fields to define ObjectBox queries.
class UsuariosModel_ {
  /// see [UsuariosModel.id]
  static final id =
      QueryIntegerProperty<UsuariosModel>(_entities[1].properties[0]);

  /// see [UsuariosModel.name]
  static final name =
      QueryStringProperty<UsuariosModel>(_entities[1].properties[1]);

  /// see [UsuariosModel.lsMenuGrupo]
  static final lsMenuGrupo = QueryRelationToMany<UsuariosModel, GrupoMenuModel>(
      _entities[1].relations[0]);
}

/// [GrupoMenuModel] entity fields to define ObjectBox queries.
class GrupoMenuModel_ {
  /// see [GrupoMenuModel.id]
  static final id =
      QueryIntegerProperty<GrupoMenuModel>(_entities[2].properties[0]);

  /// see [GrupoMenuModel.name]
  static final name =
      QueryStringProperty<GrupoMenuModel>(_entities[2].properties[1]);

  /// see [GrupoMenuModel.usuario]
  static final usuario = QueryRelationToOne<GrupoMenuModel, UsuariosModel>(
      _entities[2].properties[2]);

  /// see [GrupoMenuModel.lsMenus]
  static final lsMenus = QueryRelationToMany<GrupoMenuModel, MenuUsuarioModel>(
      _entities[2].relations[0]);
}
